
class Apriori:
	def support(query, transactions):
		return sum(query.issubset(t) for t in transactions) / len(transactions)

	def confidence(A, B, transactions):
		if A.intersection(B):
			raise ValueError("A can't have intersection with B.")

		return Apriori.support(A.union(B), transactions) /\
			Apriori.support(A, transactions)

	def run(dataset, min_conf, min_supp):
		# First step: select all itemsets with support >= min_supp

		# Second step: generate rules between the previously 
		# selected itemsets which have confidence >= min_conf
